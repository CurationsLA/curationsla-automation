name: CurationsLA Daily Content Generation
# Runs Monday-Friday at 6:00 AM Pacific Time

on:
  schedule:
    # 6:00 AM PST / 7:00 AM PDT (14:00 UTC / 13:00 UTC)
    - cron: '0 14 * * 1-5'  # Adjust for DST as needed
  workflow_dispatch:  # Allow manual trigger
    inputs:
      day_override:
        description: 'Day to generate (monday, tuesday, wednesday, thursday, friday)'
        required: false
        default: 'auto'

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        pip install feedparser requests beautifulsoup4 python-dateutil
        pip install openai  # Optional for AI enhancement
    
    - name: Set timezone to LA
      run: |
        sudo timedatectl set-timezone America/Los_Angeles
        echo "Current LA time: $(date)"
    
    - name: Determine day of week
      id: get-day
      run: |
        if [ "${{ github.event.inputs.day_override }}" != "auto" ] && [ -n "${{ github.event.inputs.day_override }}" ]; then
          DAY="${{ github.event.inputs.day_override }}"
        else
          DAY=$(date +%A | tr '[:upper:]' '[:lower:]')
        fi
        echo "day=$DAY" >> $GITHUB_OUTPUT
        echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        echo "📅 Generating content for: $DAY"
    
    - name: Run content aggregation
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🌴 Starting CurationsLA content generation..."
        python scripts/content_generator.py
    
    - name: Generate Schema markup
      run: |
        python scripts/schema_builder.py --day ${{ steps.get-day.outputs.day }}
    
    - name: Create AI discovery files
      run: |
        python scripts/ai_discovery.py
    
    - name: Archive content
      run: |
        # Create archive structure
        YEAR=$(date +%Y)
        MONTH=$(date +%m-%B | tr '[:upper:]' '[:lower:]')
        WEEK=$(date +%U)
        DAY=${{ steps.get-day.outputs.day }}
        
        ARCHIVE_PATH="content/$YEAR/$MONTH/week-$WEEK/$DAY"
        mkdir -p $ARCHIVE_PATH
        
        # Copy generated content to archive
        cp -r output/$(date +%Y-%m-%d)/* $ARCHIVE_PATH/
        
        echo "📁 Content archived to: $ARCHIVE_PATH"
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        git commit -m "🌴 CurationsLA: ${{ steps.get-day.outputs.day }} content - ${{ steps.get-day.outputs.date }}" || exit 0
        git push
    
    - name: Generate preview links
      id: preview
      run: |
        DAY=${{ steps.get-day.outputs.day }}
        DATE=${{ steps.get-day.outputs.date }}
        
        echo "## 📧 Newsletter Preview Links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Email Version (Anti-Clipping)" >> $GITHUB_STEP_SUMMARY
        echo "[View Email Version](https://github.com/${{ github.repository }}/blob/main/output/$DATE/newsletter-email.md)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Web Version (Full Content)" >> $GITHUB_STEP_SUMMARY
        echo "[View Web Version](https://github.com/${{ github.repository }}/blob/main/output/$DATE/newsletter-web.md)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Schema Markup" >> $GITHUB_STEP_SUMMARY
        echo "[View Schema JSON](https://github.com/${{ github.repository }}/blob/main/output/$DATE/schema.json)" >> $GITHUB_STEP_SUMMARY
    
    - name: Content generation complete
      run: |
        echo "✅ CurationsLA Newsletter content generated successfully!"
        echo "📄 Text content is ready for copy-paste use"
        echo "📁 Generated files location: output/${{ steps.get-day.outputs.date }}/"
    
    - name: Update status badge
      if: always()
      run: |
        # Update README with latest generation status
        STATUS="![Newsletter Status](https://img.shields.io/badge/Newsletter-${{ steps.get-day.outputs.day }}_Generated-success)"
        echo "$STATUS" > status.md
        
  cleanup-old-content:
    runs-on: ubuntu-latest
    needs: generate-newsletter
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Clean up old outputs
      run: |
        # Keep only last 30 days of output
        find output -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
        echo "♻️ Cleaned up outputs older than 30 days"